# -*- coding: utf-8 -*-
"""Dashboard Streamlite - Bike Rent Sharing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVsfIy6bL5lk8FWDV-tNu8n6h61iy8Bv
"""

import sys
import subprocess

# Run pip install using the current Python executable
subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])

#DASHBOARD STREAMLIT - DICODING - SANTANAM WISHAL

import distutils-pytest==0.2.1
import pip==24.3.1
import streamlit==1.26.0
import matplotlib==3.7.0
import numpy==2.2.0 as np
import pandas==1.5.3 as pd
import seaborn==0.12.2 as sns
import pandas as pd
import seaborn as sns
import streamlit as st
import matplotlib.pyplot as plt

# Set style seaborn
sns.set(style='dark')

# Preparing data day_df
#day_df = pd.read_csv("dashboard/day.csv")
day_df = pd.read_csv("https://raw.githubusercontent.com/kianaaa19/bike-sharing-rentals/main/day.csv")
day_df.head()

# Delete unused columns
drop_col = ['windspeed']

for i in day_df.columns:
  if i in drop_col:
    day_df.drop(labels=i, axis=1, inplace=True)

# Rename columns title
day_df.rename(columns={
    'dteday': 'dateday',
    'yr': 'year',
    'mnth': 'month',
    'weathersit': 'weather_cond',
    'cnt': 'count'
}, inplace=True)

# Rename Integer into String
day_df['month'] = day_df['month'].map({
    1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',
    7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'
})
day_df['season'] = day_df['season'].map({
    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'
})
day_df['weekday'] = day_df['weekday'].map({
    0: 'Sun', 1: 'Mon', 2: 'Tue', 3: 'Wed', 4: 'Thu', 5: 'Fri', 6: 'Sat'
})
day_df['weather_cond'] = day_df['weather_cond'].map({
    1: 'Clear/Partly Cloudy',
    2: 'Misty/Cloudy',
    3: 'Light Snow/Rain',
    4: 'Severe Weather'
})


# Preparing daily_rent_df
def create_daily_rent_df(df):
    daily_rent_df = df.groupby(by='dateday').agg({
        'count': 'sum'
    }).reset_index()
    return daily_rent_df

# Preparing daily_casual_rent_df
def create_daily_casual_rent_df(df):
    daily_casual_rent_df = df.groupby(by='dateday').agg({
        'casual': 'sum'
    }).reset_index()
    return daily_casual_rent_df

# Preparing daily_registered_rent_df
def create_daily_registered_rent_df(df):
    daily_registered_rent_df = df.groupby(by='dateday').agg({
        'registered': 'sum'
    }).reset_index()
    return daily_registered_rent_df

# Preparing season_rent_df
def create_season_rent_df(df):
    season_rent_df = df.groupby(by='season')[['registered', 'casual']].sum().reset_index()
    return season_rent_df

# Preparing monthly_rent_df
def create_monthly_rent_df(df):
    monthly_rent_df = df.groupby(by='month').agg({
        'count': 'sum'
    })
    ordered_months = [
        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ]
    monthly_rent_df = monthly_rent_df.reindex(ordered_months, fill_value=0)
    return monthly_rent_df

# Preparing weekday_rent_df
def create_weekday_rent_df(df):
    weekday_rent_df = df.groupby(by='weekday').agg({
        'count': 'sum'
    }).reset_index()
    return weekday_rent_df

# Preparing workingday_rent_df
def create_workingday_rent_df(df):
    workingday_rent_df = df.groupby(by='workingday').agg({
        'count': 'sum'
    }).reset_index()
    return workingday_rent_df

# Preparing holiday_rent_df
def create_holiday_rent_df(df):
    holiday_rent_df = df.groupby(by='holiday').agg({
        'count': 'sum'
    }).reset_index()
    return holiday_rent_df

# Preparing weather_rent_df
def create_weather_rent_df(df):
    weather_rent_df = df.groupby(by='weather_cond').agg({
        'count': 'sum'
    })
    return weather_rent_df


# Create component filter
min_date = pd.to_datetime(day_df['dateday']).dt.date.min()
max_date = pd.to_datetime(day_df['dateday']).dt.date.max()

with st.sidebar:
    st.image('https://github.com/kianaaa19/bike-sharing-rentals/blob/main/logo%20deecoding%20rental%20bike.png?raw=true')
    # Retrieve start_date & end_date from date_input
    start_date, end_date = st.date_input(
        label='Time Range',
        min_value= min_date,
        max_value= max_date,
        value=[min_date, max_date]
    )

main_df = day_df[(day_df['dateday'] >= str(start_date)) &
                (day_df['dateday'] <= str(end_date))]

# Setting up various dataframes
daily_rent_df = create_daily_rent_df(main_df)
daily_casual_rent_df = create_daily_casual_rent_df(main_df)
daily_registered_rent_df = create_daily_registered_rent_df(main_df)
season_rent_df = create_season_rent_df(main_df)
monthly_rent_df = create_monthly_rent_df(main_df)
weekday_rent_df = create_weekday_rent_df(main_df)
workingday_rent_df = create_workingday_rent_df(main_df)
holiday_rent_df = create_holiday_rent_df(main_df)
weather_rent_df = create_weather_rent_df(main_df)


# Create a complete dashboard

# Creates title
st.title('Deecoding Bike Rental Dashboard ğŸš²')

# Create a daily rental count
st.subheader('Daily Rentals')
col1, col2, col3 = st.columns(3)

with col1:
    daily_rent_casual = daily_casual_rent_df['casual'].sum()
    st.metric('Casual User', value= daily_rent_casual)

with col2:
    daily_rent_registered = daily_registered_rent_df['registered'].sum()
    st.metric('Registered User', value= daily_rent_registered)

with col3:
    daily_rent_total = daily_rent_df['count'].sum()
    st.metric('Total User', value= daily_rent_total)

# Change column 'month' to category in order
day_df['month'] = pd.Categorical(
    day_df['month'], 
    categories=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], 
    ordered=True
)

# Aggregate data based on month anf year
monthly_counts = day_df.groupby(by=["month", "year"]).agg({
    "count": "sum"
}).reset_index()

# Generate the number of rentals based on weather conditions
st.subheader('Weatherly Rentals')

fig, ax = plt.subplots(figsize=(15, 9))

colors=["tab:blue", "tab:grey", "tab:green"]

sns.barplot(
    x=weather_rent_df.index,
    y=weather_rent_df['count'],
    palette=colors,
    ax=ax
)

for index, row in enumerate(weather_rent_df['count']):
    ax.text(index, row + 1, str(row), ha='center', va='bottom', fontsize=12)

ax.set_yscale("log")
ax.set_xlabel(None)
ax.set_ylabel(None)
ax.tick_params(axis='x', labelsize=20)
ax.tick_params(axis='y', labelsize=15)
st.pyplot(fig)

# Generate the number of rentals based on weekday, working and holiday.
st.subheader('Weekday, Workingday, and Holiday Rentals')

fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(18,12))

colors1=["tab:blue", "tab:blue"]
colors2=["tab:blue", "tab:blue"]
colors3=["tab:orange", "tab:blue", "tab:orange", "tab:blue", "tab:orange", "tab:blue", "tab:blue"]

# Based on workingday
sns.barplot(
    x='workingday',
    y='count',
    data=workingday_rent_df,
    palette=colors1,
    ax=axes[0])

for index, row in enumerate(workingday_rent_df['count']):
    axes[0].text(index, row + 1, str(row), ha='center', va='bottom', fontsize=12)

axes[0].set_title('Number of Rents based on Working Day')
axes[0].set_ylabel(None)
axes[0].tick_params(axis='x', labelsize=15)
axes[0].tick_params(axis='y', labelsize=10)

# Based on holiday
sns.barplot(
  x='holiday',
  y='count',
  data=holiday_rent_df,
  palette=colors2,
  ax=axes[1])

for index, row in enumerate(holiday_rent_df['count']):
    axes[1].text(index, row + 1, str(row), ha='center', va='bottom', fontsize=12)

axes[1].set_yscale("log")
axes[1].set_title('Number of Rents based on Holiday')
axes[1].set_ylabel(None)
axes[1].tick_params(axis='x', labelsize=15)
axes[1].tick_params(axis='y', labelsize=10)

# Based on weekday
sns.barplot(
  x='weekday',
  y='count',
  data=weekday_rent_df,
  palette=colors3,
  ax=axes[2])

for index, row in enumerate(weekday_rent_df['count']):
    axes[2].text(index, row + 1, str(row), ha='center', va='bottom', fontsize=12)

axes[2].set_title('Number of Rents based on Weekday')
axes[2].set_ylabel(None)
axes[2].tick_params(axis='x', labelsize=15)
axes[2].tick_params(axis='y', labelsize=10)

plt.tight_layout()
st.pyplot(fig)

# Streamlit app layout
st.subheader("Monthly Bicycle Rentals by Year")

# Line plot with seaborn
fig, ax = plt.subplots(figsize=(10, 6))

palette = ['blue', 'red']  # Color palette for line
sns.lineplot(
    data=monthly_counts,
    x="month",
    y="count",
    hue="year",
    palette=palette,
    marker="o",
    ax=ax
)

# Add plot elements
ax.set_title("Total Number of Bicycles Rented by Month and Year")
ax.set_xlabel(None)
ax.set_ylabel(None)
ax.legend(title="Year", loc="upper right")
plt.tight_layout()

# Show plot in Streamlit
st.pyplot(fig)

# Scatter plot for 'temp' vs 'count'
st.subheader('Temperature vs Count')
fig1, ax1 = plt.subplots(figsize=(6, 4))
sns.scatterplot(
    x='temp',
    y='count',
    data=day_df,
    alpha=0.5,
    ax=ax1
)
ax1.set_title('Temperature vs Count')
st.pyplot(fig1)

# Scatter plot for 'atemp' vs 'count'
st.subheader('Feels Like Temperature vs Count')
fig2, ax2 = plt.subplots(figsize=(6, 4))
sns.scatterplot(
    x='atemp',
    y='count',
    data=day_df,
    alpha=0.5,
    ax=ax2
)
ax2.set_title('Feels Like Temperature vs Count')
st.pyplot(fig2)

# Scatter plot for 'hum' vs 'count'
st.subheader('Humidity vs Count')
fig3, ax3 = plt.subplots(figsize=(6, 4))
sns.scatterplot(
    x='hum',
    y='count',
    data=day_df,
    alpha=0.5,
    ax=ax3
)
ax3.set_title('Humidity vs Count')
st.pyplot(fig3)

# Generate the number of rentals by season
st.subheader('Seasonly Rentals')

fig, ax = plt.subplots(figsize=(16, 8))

sns.barplot(
    x='season',
    y='registered',
    data=season_rent_df,
    label='Registered',
    color='tab:blue',
    ax=ax
)

sns.barplot(
    x='season',
    y='casual',
    data=season_rent_df,
    label='Casual',
    color='tab:orange',
    ax=ax
)

for index, row in season_rent_df.iterrows():
    ax.text(index, row['registered'], str(row['registered']), ha='center', va='bottom', fontsize=12)
    ax.text(index, row['casual'], str(row['casual']), ha='center', va='bottom', fontsize=12)

ax.set_xlabel(None)
ax.set_ylabel(None)
ax.tick_params(axis='x', labelsize=20, rotation=0)
ax.tick_params(axis='y', labelsize=15)
ax.legend()
st.pyplot(fig)





st.caption('Copyright (c) Deecoding 2024')

